version: "3"

dotenv:
  - .env

env:
  TEST_INTEG_DIR: "{{.USER_WORKING_DIR}}/test"

vars:
  TEST_IMAGE_NAME: "terminal-test"
  TEST_TIMEOUT: "5m"
  SHELL_CFG: "~/.bashrc"

tasks:
  build:
    cmds:
      - go build -o bin/agent ./cmd/agent/main.go
    silent: false

  install:
    silent: true
    cmds:
      - task: build
      - mkdir -p ~/.local/bin
      - cp bin/agent ~/.local/bin/agent
      - echo "Terminal Agent installed to ~/.local/bin/agent"
      - echo "To run the agent, add ~/.local/bin to your PATH."
      - echo "You can do this by running:"
      - echo "  echo 'export PATH=\$PATH:~/.local/bin' >> ~/.bashrc"

  install:alias:
    desc: Install the alias for the agent
    preconditions:
      - sh: test -f {{.SHELL_CFG}}
        msg: "Auto-alias only works for bash shell. Please add the alias manually."
    status:
      - grep -q 'terminal-agent alias' {{.SHELL_CFG}}
    cmds:
      - printf '\n# BEGIN terminal-agent alias\n' >> {{.SHELL_CFG}}
      - printf 'alias aa="agent ask --markdown "\n' >> {{.SHELL_CFG}}
      - printf '\n# END terminal-agent alias\n' >> {{.SHELL_CFG}}

  uninstall:alias:
    desc: Remove aliases for the agent
    cmds:
      - sed -i -n -e '/^# BEGIN/,/^# END/!p' {{.SHELL_CFG}}
  
  test:
    desc: Run all tests
    cmds:
      - go test -v ./...

  # Application related
  run:
    cmds:
      - go run cmd/agent/main.go
    silent: false

  run:ask:
    vars:
      ARGS: "{{.CLI_ARGS}}"
    desc: Run the agent with a question, e.g. `task run:ask -- "What is the meaning of life?"`
    cmds:
      - go run cmd/agent/main.go --loglevel debug ask --log {{.ARGS}}
    silent: false

  run:ask:stream:
    vars:
      ARGS: "{{.CLI_ARGS}}"
    desc: Run the agent with a question, e.g. `task run:ask -- "What is the meaning of life?"`
    cmds:
      - go run cmd/agent/main.go  --loglevel debug ask --stream --log {{.ARGS}}
    silent: false

  run:task:
    vars:
      ARGS: "{{.CLI_ARGS}}"
    desc: Run the agent with a task, e.g. `task run:task -- "List all files in home directory"`
    cmds:
      # - go run cmd/agent/main.go task --log --provider $PROVIDER --query "{{.ARGS}}"
      - go run cmd/agent/main.go task --loglevel debug --provider $PROVIDER {{.ARGS}}
    silent: false

  run:tool:exec:
    vars:
      TOOL: "{{.TOOL}}"
      QUERY: "{{.QUERY}}"
    desc: Run the agent with a tool
    cmds:
      - go run cmd/agent/main.go
        --loglevel debug
        tool exec
        {{.TOOL}}
        {{.QUERY}}

  run:tool:exec:unix:
    desc: Run the agent with a tool
    vars:
      CMD: "ls -la"
    cmds:
      - task: run:tool:exec
        vars:
          TOOL: "unix"
          QUERY: '{"command":"{{.CMD}}"}'

  run:set:openai:
    desc: Set the provider to openai
    cmds:
      - go run cmd/agent/main.go config set provider openai
      - go run cmd/agent/main.go config set model gpt-4o-mini-2024-07-18

  run:set:anthropic:
    desc: Set the provider to anthropic
    cmds:
      - go run cmd/agent/main.go config set provider anthropic
      - go run cmd/agent/main.go config set model claude-3-haiku-latest

  run:set:bedrock:
    desc: Set the provider to bedrock
    cmds:
      - go run cmd/agent/main.go config set provider bedrock
      - go run cmd/agent/main.go config set model anthropic.claude-3-haiku-20240307-v1:0

  run:set:google:
    desc: Set the provider to google
    cmds:
      - go run cmd/agent/main.go config set provider google
      - go run cmd/agent/main.go config set model gemini-2.0-flash-lite
  
  run:set:ollama:
    desc: Set the provider to ollama
    cmds:
      - go run cmd/agent/main.go config set provider ollama
      - go run cmd/agent/main.go config set model llama3.2

  run:generate:
    desc: Execute generation
    cmds:
      - go build -tags=tools -o bin/generate
      - go generate ./...

  # Environment related - mainly for testing
  env:build:
    desc: Build the test environment
    cmds:
      - docker build -t {{.TEST_IMAGE_NAME}} .
    silent: false

  env:setup:
    desc: Setup the test environment
    deps:
      - env:build
    cmds:
      - docker container stop {{.TEST_IMAGE_NAME}} || true
      - docker container rm {{.TEST_IMAGE_NAME}} || true
      - docker run -d
        --volume $(pwd):/agent
        --name {{.TEST_IMAGE_NAME}} {{.TEST_IMAGE_NAME}}
        sh -c "while true; do sleep {{.TEST_TIMEOUT}}; done"
    silent: false

  env:access:
    desc: Access the test environment
    cmds:
      - docker exec -it {{.TEST_IMAGE_NAME}} sh

  # Tests
  test:unit:
    cmd: go test -v ./...

  test:integration:
    env:
      TEST_INTEG_DIR: "{{.USER_WORKING_DIR}}/test"
    cmds:
      - go test -v -tags=integration ./...

  test:integration:env:
    deps:
      - env:setup
    env:
      TEST_INTEG_DIR: "/agent/test"
    cmds:
      - docker ps | grep {{.TEST_IMAGE_NAME}}
      - docker exec --env TEST_INTEG_DIR=$TEST_INTEG_DIR {{.TEST_IMAGE_NAME}} go test -v -tags=integration ./...
      - docker stop {{.TEST_IMAGE_NAME}}

  # Testing models

  ## ASK
  test:model:ask:
    vars:
      Q: '{{default "What command shows disk usage in human readable form?" .Q}}'
      PROVIDER: '{{default "perplexity" .PROVIDER}}'
      MODEL: '{{default "llama-3-8b-instruct" .MODEL}}'
    silent: true
    cmds:
      - go run cmd/agent/main.go
        --loglevel debug
        ask
        --log
        --provider {{.PROVIDER}}
        --model {{.MODEL}}
        {{.Q}}

  test:model:ask:perplexity:
    vars:
      Q: "What command shows disk usage in human readable form?"
      PROVIDER: "perplexity"
      MODEL: "llama-3-8b-instruct"
    cmds:
      - task: test:model:ask
        vars:
          PROVIDER: "{{.PROVIDER}}"
          MODEL: "{{.MODEL}}"
          Q: "{{.Q}}"

  test:model:ask:bedrock:
    vars:
      Q: "What command shows disk usage in human readable form?"
      PROVIDER: "bedrock"
      MODEL: "anthropic.claude-3-haiku-20240307-v1:0"
    cmds:
      - task: test:model:ask
        vars:
          PROVIDER: "{{.PROVIDER}}"
          MODEL: "{{.MODEL}}"
          Q: "{{.Q}}"

  test:model:ask:google:
    vars:
      Q: "What command shows disk usage in human readable form?"
      PROVIDER: "google"
      MODEL: "gemini-2.0-flash-lite"
    cmds:
      - task: test:model:ask
        vars:
          PROVIDER: "{{.PROVIDER}}"
          MODEL: "{{.MODEL}}"
          Q: "{{.Q}}"

  # TASK
  test:model:task:
    vars:
      Q: '{{default "What command shows disk usage in human readable form?" .Q}}'
      PROVIDER: '{{default "perplexity" .PROVIDER}}'
      MODEL: '{{default "llama-3-8b-instruct" .MODEL}}'
    # desc: Run the agent with a question`
    silent: true
    cmds:
      - go run cmd/agent/main.go
        --loglevel debug
        task
        --log
        --provider {{.PROVIDER}}
        --model {{.MODEL}}
        {{.Q}}

  test:model:task:perplexity:
    vars:
      Q: "List all files in home directory"
      PROVIDER: "perplexity"
      MODEL: "llama-3-8b-instruct"
    cmds:
      - task: test:model:task
        vars:
          PROVIDER: "{{.PROVIDER}}"
          MODEL: "{{.MODEL}}"
          Q: "{{.Q}}"

  test:model:task:bedrock:
    vars:
      Q: "List all files in home directory"
      PROVIDER: "bedrock"
      MODEL: "anthropic.claude-3-haiku-20240307-v1:0"
    cmds:
      - task: test:model:task
        vars:
          PROVIDER: "{{.PROVIDER}}"
          MODEL: "{{.MODEL}}"
          Q: "{{.Q}}"

  test:model:task:google:
    vars:
      Q: "List all files in home directory"
      PROVIDER: "google"
      MODEL: "gemini-2.0-flash-lite"
    cmds:
      - task: test:model:task
        vars:
          PROVIDER: "{{.PROVIDER}}"
          MODEL: "{{.MODEL}}"
          Q: "{{.Q}}"

  # Misc
  misc:download-spec:antrhopic:
    desc: Download the spec for the bedrock model
    cmds:
      - mkdir -p specs
      - curl -o specs/anthropic-spec.yaml https://raw.githubusercontent.com/laszukdawid/anthropic-openapi-spec/refs/heads/main/hosted_spec.json
